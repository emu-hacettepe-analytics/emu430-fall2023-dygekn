[
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has two parts.\n\n\n\n\nYou can watch the video by clicking the link\n\nThe purr function offers a more effective alternative to for loops in most cases. Purr further increases the level of abstraction with map functions. Additionally, the Purr function is more user-friendly in bypassing performance bottlenecks. Purr ensures that all calculations are independent and makes it easy to share work across multiple calls. If you master the Purr function, you can write code that is shorter, clearer, and more likely to be correct to begin with.\nFor example, you can get the progress bar using the following code:\n\nlibrary(purrr)\nx &lt;- map(1:100, \\(x) Sys.sleep(0.1), .progress = TRUE)\n\n ■■■■■                             15% |  ETA:  9s\n\n\n ■■■■■■■■■■■■■                     41% |  ETA:  7s\n\n\n ■■■■■■■■■■■■■■■■■■■■■             68% |  ETA:  4s\n\n\n ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% |  ETA:  1s\n\n\n\nlibrary(purrr)\nx &lt;- map(1:100, \\(x) Sys.sleep(0.1), .progress = \"reticulating process\")\n\nreticulating process ■■■■■■                            18% |  ETA:  9s\n\n\nreticulating process ■■■■■■■■■■■■■■■                   45% |  ETA:  6s\n\n\nreticulating process ■■■■■■■■■■■■■■■■■■■■■■■           72% |  ETA:  3s\n\n\nreticulating process ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    98% |  ETA:  0s\n\n\nYou can use the map() function to better understand error messages and determine where errors occur in the data set.\nIn the new purr version, the map_vec() function adds a new function that can work with different types of vector objects. For example, it can work with different types such as date and time:\n\nlibrary(purrr)\nmap_vec(1:3, \\(i) Sys.Date() + 1)\n\n[1] \"2023-11-03\" \"2023-11-03\" \"2023-11-03\"\n\n\nWe also recommend using map_dfr() and map_dfc() instead of list_rbind(), list_c() and list_cbind(). However, note that these functions are not map functions.\nIf you had a complex nested list and you had to use low level purrr functions like “unnest_longer” and “unnest_wider” to simplify things and to make a nested list single level you had to use \"list_flatten()\" function several times. Thanks to the Purrr package, you can more easily convert nested lists into a single list by using the “list_simplify()” function.\nFinally, some functionality of the ‘purr’ package will be deprecated. If you are using these deprecated functions, you will receive warning messages at 8-hour intervals. After 1 or 2 years, you will encounter error messages when you continue to use these functions. It would be more useful to choose the extend_grid() function instead of using functions to be removed such as the cross() function.\nPackage lifecycle and package development process is a process where not only adding new functions but also removing these functions is equally important.\n\n\n\nData Structures:\n\nR is known for its data manipulation capabilities. It has data structures like vectors, lists, data frames, and matrices.\n\n\n# Creating a vector\nr_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Creating a data frame\nr_df &lt;- data.frame(Name = c(\"Duygu\", \"Pınar\", \"Elif\"), Age = c(23, 23, 27))\n\n\nPython’s data manipulation is often done using libraries like NumPy and Pandas. Common data structures include lists, dictionaries, and NumPy arrays.\n\n\n# Creating a list\npython_list = [1, 2, 3, 4, 5]\n\n# Creating a Pandas DataFrame\nimport pandas as pd\npython_df = pd.DataFrame({'Name': ['Duygu', 'Pınar', 'Elif'], 'Age': [23, 23, 27]})\n\nSyntax:\n\nR is known for its concise and vectorized syntax. It often uses functions like apply, lapply, sapply for data manipulation.\n\n\n# Sum of all elements in a vector\nsum(r_vector)\n\n[1] 15\n\n# Apply a function to each element of a vector\nsapply(r_vector, function(x) x * 2)\n\n[1]  2  4  6  8 10\n\n\n\nPython syntax is more explicit. It often uses loops and list comprehensions for similar operations.\n\n\n# Sum of all elements in a list\nsum(python_list)\n\n15\n\n# List comprehension to double each element\n[x * 2 for x in python_list]\n\n[2, 4, 6, 8, 10]\n\n\nFunction Definitions:\n\nFunction definitions in R use the function keyword, and function arguments are often matched by position.\n\n\n# Function definition in R\nmy_function &lt;- function(x, y) {\n  result &lt;- x + y\n  return(result)\n}\n\n\nPython uses the def keyword for function definitions, and it supports keyword arguments.\n\n\n# Function definition in Python\ndef my_function(x, y):\n    result = x + y\n    return result\n\n\n\n\n\n\nlibrary(dslabs)\ndata(\"na_example\")\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\nsum(is.na(na_example))\n\n[1] 145\n\nno_na &lt;- ifelse(is.na(na_example),0,na_example)\nprint(no_na)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\nsum(is.na(no_na))\n\n[1] 0"
  },
  {
    "objectID": "assignments/assignment-1.html#second-part-is",
    "href": "assignments/assignment-1.html#second-part-is",
    "title": "Assignment 1",
    "section": "",
    "text": "library(dslabs)\ndata(\"na_example\")\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\nsum(is.na(na_example))\n\n[1] 145\n\nno_na &lt;- ifelse(is.na(na_example),0,na_example)\nprint(no_na)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\nsum(is.na(no_na))\n\n[1] 0"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the DataVizards project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://[https://emu-hacettepe-analytics.github.io/emu430-fall2023-team-data_vizards/].\nSummary\nWe will carry out our project by considering 2021 internal migration data across T??rkiye. Our main focus is In Migration of internal cities. In this regard, migration trends between different regions such as Eastern Anatolia, Southeastern Anatolia, Aegean, Marmara will be determined and migration relations between big cities and other cities will be analyzed in detail. The relationship between population density and migration will be determined by examining migration rates, especially in cities with large populations. Migration trends will be evaluated according to age groups, gender, educational status and reasons for migration. (retirement, appointment, etc.) Also, the economic development level of the economic region will be interpreted according to the labor force, household disposable income, number of enterprises, number of housing sales, etc. This comprehensive analysis will guide our project in understanding Turkey's migration situation.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023 EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 25, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\n\nmovie_urls &lt;- c(\n  \"https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&release_date=2010-01-01,2023-12-31&count=250\",\n  \"https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&release_date=,2009-12-31&count=250\"\n)\nmovie_data &lt;- data.frame()\nfor (url in movie_urls) {\n  data_html &lt;- read_html(url)\n  \n  title_names &lt;- data_html |&gt; html_nodes('.ipc-title__text')\n  title_names &lt;- html_text(title_names)\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  year_values &lt;- data_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\n  year_values &lt;- html_text(year_values)\n  year_values &lt;- str_remove_all(year_values, \"[()]\")\n  year_values &lt;- as.numeric(year_values)\n  \n  duration_values &lt;- data_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\n  duration_values &lt;- html_text(duration_values)\n  \n  # I helped Chatgbt\n  converted_duration &lt;- sapply(duration_values, function(duration) {\n    hours &lt;- as.numeric(substr(duration, 1, 1))\n    minutes &lt;- ifelse(nchar(duration) &gt; 2, as.integer(substring(duration, nchar(duration) - 2, nchar(duration) - 1)), 0)\n    total_minutes &lt;- 60 * hours + minutes\n    return(total_minutes)\n  })\n  \n  rating_values &lt;- data_html %&gt;% html_nodes('.ratingGroup--imdb-rating') %&gt;% html_text() %&gt;%\n    str_match(\"\\\\b([0-9]+\\\\.[0-9]+)\") %&gt;% as.numeric() \n  \n  vote_values &lt;- data_html |&gt;  html_nodes(\".kRnqtn\")\n  vote_values &lt;- html_text(vote_values)\n  vote_values &lt;- str_remove_all(vote_values, \"[a-zA-Z,]\") \n  vote_values &lt;- as.numeric(vote_values)\n  \n  temp_data &lt;- data.frame(Title = title_names,\n                          Year = year_values,\n                          Duration = converted_duration,\n                          Rating = rating_values,\n                          Votes = vote_values)\n  temp_data &lt;- unique(temp_data)\n  movie_data &lt;- rbind(movie_data, temp_data)\n} \n\n\n#References\n#https://stringr.tidyverse.org/reference/str_remove.html\n#https://stackoverflow.com/questions/63407427/how-to-split-hour-and-minute-from-my-dataset\n#https://stringr.tidyverse.org/reference/str_match.htm\n\na)\n\nmovie_data &lt;- movie_data |&gt; arrange(desc(Rating))\ntop_5 &lt;- head(movie_data, 5)\nbottom_5 &lt;- tail(movie_data, 5)\nlibrary(knitr)\nkable(rbind(top_5, bottom_5), caption = \"The Top 5 Movies and The Worst 5 Movies\")\n\n\nThe Top 5 Movies and The Worst 5 Movies\n\n\n\nTitle\nYear\nDuration\nRating\nVotes\n\n\n\n\n1\nHababam Sinifi\n1975\n87\n9.2\n42513\n\n\n2\nCM101MMXI Fundamentals\n2013\n139\n9.1\n46996\n\n\n3\nTosun Pasa\n1976\n90\n8.9\n24329\n\n\n4\nHababam Sinifi Sinifta Kaldi\n1975\n95\n8.9\n24370\n\n\n5\nSüt Kardesler\n1976\n80\n8.8\n20888\n\n\n466\nCumali Ceber 2\n2018\n100\n1.2\n10229\n\n\n467\nMüjde\n2022\n288\n1.2\n9920\n\n\n468\n15/07 Safak Vakti\n2021\n95\n1.2\n20608\n\n\n469\nCumali Ceber: Allah Seni Alsin\n2017\n100\n1.0\n39267\n\n\n470\nReis\n2017\n108\n1.0\n73973\n\n\n\n\n#References\n#https://bookdown.org/yihui/rmarkdown-cookbook/kable.html\n\nFrom the Top 5 section, I only watched Hababam S??n??f?? and CM101MMXI Fundamentals. Among these two movies, Hababam S??n??f?? may be my favorite. I haven’t watched any of the 5 worst movies. I think the IMDB ranking is reasonable.\nb)\n\nmovie_data |&gt; filter(Title %in% c(\"A.R.O.G\", \"Sevmek Zamani\"))\n\n          Title Year Duration Rating Votes\n1 Sevmek Zamani 1965       86    8.0  7129\n2       A.R.O.G 2008      127    7.3 44635\n\n\nc)\n\n#plot the rating averages as a scatter plot\nlibrary(dplyr)\nlibrary(ggplot2)\nrating_averages &lt;- movie_data %&gt;% group_by(Year) %&gt;% summarise(Average_Rating = mean(Rating))\nggplot(rating_averages, aes(x = Year, y = Average_Rating)) +\n  geom_point() +\n  labs(title = \"Average Rating of Turkish Movies by Year\",\n       x = \"Year\",\n       y = \"Average Rating\")+ theme(axis.text.x = element_text(angle= 90, hjust = 1)) \n\n\n\n\nFrom this graph, we can see that the average rating vary over the years, but there is an overall decreasing trend. For example, while average rating were around 8 in the early 1970s, they dropped to around 6 in the 2010s. This shows that the average vote value of Turkish films has decreased over time.\nHowever, average rating alone may not be a sufficient indicator. Because a different number of movies are shot every year, which may affect the average ating. For example, fewer shots were taken in 1960 than in 2000. This does not necessarily mean that the films shot in 1960 were of very high quality. Therefore, it is necessary to consider the number of films.\n\n# plot the number of movies over the years\nmovie_counts &lt;- movie_data %&gt;%\n  count(Year)\nggplot(movie_counts, aes(x = Year, y = n)) +\n  geom_point() +\n  labs(title = \"Number of Turkish Movies by Year\",\n       x = \"Year\",\n       y = \"Number of Movies\") + theme(axis.text.x = element_text(angle= 90, hjust = 1)) \n\n\n\n\nFrom this graph, we can see that the number of movies is increasing over the years, but there are some fluctuations. It shows us that it increases over time.\n\n#To plot the box plots of ratings over the years\nmovie_data &lt;- movie_data %&gt;% mutate(Year = reorder(Year, Rating, FUN = median)) \nggplot(movie_data, aes(x = factor(Year), y = Rating)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Ratings of Turkish Movies by Year\",\n       x = \"Year\",\n       y = \"Rating\") +theme(axis.text.x = element_text(angle= 90, hjust = 1)) \n\n\n\n\nAs can be seen in the graph, it is generally seen that as the number of years increases, the average number of votes for films decreases. It may indicate that the scores of films from 2004 are distributed over a wide range.\n\ncor(movie_data$Votes, movie_data$Rating, use = \"complete.obs\") \n\n[1] 0.1307806\n\ncor(movie_data$Duration, movie_data$Rating, use = \"complete.obs\")\n\n[1] -0.03192943\n\n#References\n#https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cor\n\nAccording to these outputs, I can say that there is a very weak positive correlation between the number of votes and the rating This shows that the rate tends to increase slightly as the number of votes increases. However, this relationship is not very strong.\nI can say that there is almost zero correlation between time and rate. This shows that there is no linear relationship between time and rate. So, no matter how long or short the movie is, its rate does not change.\n\nurl_new &lt;- \"https://m.imdb.com/search/title/?title_type=feature&sort=moviemeter,asc&groups=top_1000&country_of_origin=TR\"\npage &lt;- read_html(url_new)\ntitles &lt;- page |&gt; html_nodes('.ipc-title__text') |&gt; html_text()\ntitles &lt;- tail(head(titles,-1),-1)\ntitles &lt;- str_split(titles, \" \", n=2)\ntitles &lt;- unlist(lapply(titles, function(x) {x[2]}))\nyears &lt;- page |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)') |&gt; html_text()\nyears &lt;- str_remove_all(years, \"[()]\")\nyears &lt;- as.numeric(years)\nmovie_data$Year &lt;- as.numeric(as.character(movie_data$Year))\nnew_data &lt;- data.frame(Title = titles, Year = years)\nnew_data &lt;- inner_join(movie_data, new_data, by = c(\"Title\", \"Year\"))\nnew_data %&gt;% arrange(desc(Rating)) %&gt;% head(11)\n\n                       Title Year Duration Rating Votes\n1  Ayla: The Daughter of War 2017      125    8.3 42991\n2   Yedinci Kogustaki Mucize 2019      132    8.2 54161\n3             Babam ve Oglum 2005      108    8.2 91035\n4                     Eskiya 1996      128    8.1 71703\n5   Her Sey Çok Güzel Olacak 1998      107    8.1 27122\n6                 Kis Uykusu 2014      196    8.0 54642\n7                Ahlat Agaci 2018      188    8.0 27011\n8      Nefes: Vatan Sagolsun 2009      128    8.0 35020\n9                   G.O.R.A. 2004      127    8.0 66032\n10                 Vizontele 2001      110    8.0 38402\n11   Bir Zamanlar Anadolu'da 2011      157    7.8 49359\n\n\nThese movies are not ranked the same as the highest-rated movies in the first data frame. Other variations of IMDb may also have been used. For example, popularity, critics’ comments, awards, etc.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Soon.\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "You can download my CV"
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nASISGUARD, Project Management, 2023 - Present"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nFirm Patika.dev , position Operations and Analytics Specialist, year April 2022 - February 2023\nFirm TÜBİTAK BİLGEM YTE, position Business Analyst, year July 2023\nFirm ASISGUARD, position Project Management, year August 2023\nMAKİNE ve KİMYA ENDÜSTRİSİ A.Ş position Supply Chain Management, year September 2023"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Duygu Eken.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#first-part-is",
    "href": "assignments/assignment-1.html#first-part-is",
    "title": "Assignment 1",
    "section": "",
    "text": "You can watch the video by clicking the link\n\nThe purr function offers a more effective alternative to for loops in most cases. Purr further increases the level of abstraction with map functions. Additionally, the Purr function is more user-friendly in bypassing performance bottlenecks. Purr ensures that all calculations are independent and makes it easy to share work across multiple calls. If you master the Purr function, you can write code that is shorter, clearer, and more likely to be correct to begin with.\nFor example, you can get the progress bar using the following code:\n\nlibrary(purrr)\nx &lt;- map(1:100, \\(x) Sys.sleep(0.1), .progress = TRUE)\n\n ■■■■■                             15% |  ETA:  9s\n\n\n ■■■■■■■■■■■■■                     41% |  ETA:  7s\n\n\n ■■■■■■■■■■■■■■■■■■■■■             68% |  ETA:  4s\n\n\n ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% |  ETA:  1s\n\n\n\nlibrary(purrr)\nx &lt;- map(1:100, \\(x) Sys.sleep(0.1), .progress = \"reticulating process\")\n\nreticulating process ■■■■■■                            18% |  ETA:  9s\n\n\nreticulating process ■■■■■■■■■■■■■■■                   45% |  ETA:  6s\n\n\nreticulating process ■■■■■■■■■■■■■■■■■■■■■■■           72% |  ETA:  3s\n\n\nreticulating process ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    98% |  ETA:  0s\n\n\nYou can use the map() function to better understand error messages and determine where errors occur in the data set.\nIn the new purr version, the map_vec() function adds a new function that can work with different types of vector objects. For example, it can work with different types such as date and time:\n\nlibrary(purrr)\nmap_vec(1:3, \\(i) Sys.Date() + 1)\n\n[1] \"2023-11-03\" \"2023-11-03\" \"2023-11-03\"\n\n\nWe also recommend using map_dfr() and map_dfc() instead of list_rbind(), list_c() and list_cbind(). However, note that these functions are not map functions.\nIf you had a complex nested list and you had to use low level purrr functions like “unnest_longer” and “unnest_wider” to simplify things and to make a nested list single level you had to use \"list_flatten()\" function several times. Thanks to the Purrr package, you can more easily convert nested lists into a single list by using the “list_simplify()” function.\nFinally, some functionality of the ‘purr’ package will be deprecated. If you are using these deprecated functions, you will receive warning messages at 8-hour intervals. After 1 or 2 years, you will encounter error messages when you continue to use these functions. It would be more useful to choose the extend_grid() function instead of using functions to be removed such as the cross() function.\nPackage lifecycle and package development process is a process where not only adding new functions but also removing these functions is equally important.\n\n\n\nData Structures:\n\nR is known for its data manipulation capabilities. It has data structures like vectors, lists, data frames, and matrices.\n\n\n# Creating a vector\nr_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Creating a data frame\nr_df &lt;- data.frame(Name = c(\"Duygu\", \"Pınar\", \"Elif\"), Age = c(23, 23, 27))\n\n\nPython’s data manipulation is often done using libraries like NumPy and Pandas. Common data structures include lists, dictionaries, and NumPy arrays.\n\n\n# Creating a list\npython_list = [1, 2, 3, 4, 5]\n\n# Creating a Pandas DataFrame\nimport pandas as pd\npython_df = pd.DataFrame({'Name': ['Duygu', 'Pınar', 'Elif'], 'Age': [23, 23, 27]})\n\nSyntax:\n\nR is known for its concise and vectorized syntax. It often uses functions like apply, lapply, sapply for data manipulation.\n\n\n# Sum of all elements in a vector\nsum(r_vector)\n\n[1] 15\n\n# Apply a function to each element of a vector\nsapply(r_vector, function(x) x * 2)\n\n[1]  2  4  6  8 10\n\n\n\nPython syntax is more explicit. It often uses loops and list comprehensions for similar operations.\n\n\n# Sum of all elements in a list\nsum(python_list)\n\n15\n\n# List comprehension to double each element\n[x * 2 for x in python_list]\n\n[2, 4, 6, 8, 10]\n\n\nFunction Definitions:\n\nFunction definitions in R use the function keyword, and function arguments are often matched by position.\n\n\n# Function definition in R\nmy_function &lt;- function(x, y) {\n  result &lt;- x + y\n  return(result)\n}\n\n\nPython uses the def keyword for function definitions, and it supports keyword arguments.\n\n\n# Function definition in Python\ndef my_function(x, y):\n    result = x + y\n    return result"
  }
]