---
title: "Assignment 1"
---

# Assignment 1

My first assignment has two parts.

## First Part is

### Hadley Wickham \| {purrr} 1.0 video summary

You can watch the video by clicking the [link](https://www.youtube.com/watch?v=EGAs7zuRutY&list=PL9HYL-VRX0oTOK4cpbCbRk15K2roEgzVW&index=5)

![](images/Ekran%20görüntüsü%202023-11-01%20000846.png){width="361"}

The purr function offers a more effective alternative to for loops in most cases. Purr further increases the level of abstraction with map functions. Additionally, the Purr function is more user-friendly in bypassing performance bottlenecks. Purr ensures that all calculations are independent and makes it easy to share work across multiple calls. If you master the Purr function, you can write code that is shorter, clearer, and more likely to be correct to begin with.

For example, you can get the progress bar using the following code:

```{r}
library(purrr)
x <- map(1:100, \(x) Sys.sleep(0.1), .progress = TRUE)

```

```{r}
library(purrr)
x <- map(1:100, \(x) Sys.sleep(0.1), .progress = "reticulating process")
```

You can use the `map()` function to better understand error messages and determine where errors occur in the data set.

In the new purr version, the `map_vec()` function adds a new function that can work with different types of vector objects. For example, it can work with different types such as date and time:

```{r}
library(purrr)
map_vec(1:3, \(i) Sys.Date() + 1)
```

We also recommend using `map_dfr()` and `map_dfc()` instead of `list_rbind()`, `list_c()` and `list_cbind()`. However, note that these functions are not map functions.

If you had a complex nested list and you had to use low level purrr functions like "unnest_longer" and "unnest_wider" to simplify things and to make a nested list single level you had to use `"list_flatten()"` function several times. Thanks to the Purrr package, you can more easily convert nested lists into a single list by using the "list_simplify()" function.

Finally, some functionality of the 'purr' package will be deprecated. If you are using these deprecated functions, you will receive warning messages at 8-hour intervals. After 1 or 2 years, you will encounter error messages when you continue to use these functions. It would be more useful to choose the `extend_grid()` function instead of using functions to be removed such as the `cross()` function.

Package lifecycle and package development process is a process where not only adding new functions but also removing these functions is equally important.

### Three differences between R and Python

**Data Structures:**

-   R is known for its data manipulation capabilities. It has data structures like vectors, lists, data frames, and matrices.

```{r}
# Creating a vector
r_vector <- c(1, 2, 3, 4, 5)

# Creating a data frame
r_df <- data.frame(Name = c("Duygu", "Pınar", "Elif"), Age = c(23, 23, 27))
```

-   Python's data manipulation is often done using libraries like NumPy and Pandas. Common data structures include lists, dictionaries, and NumPy arrays.

```{python}
# Creating a list
python_list = [1, 2, 3, 4, 5]

# Creating a Pandas DataFrame
import pandas as pd
python_df = pd.DataFrame({'Name': ['Duygu', 'Pınar', 'Elif'], 'Age': [23, 23, 27]})
```

**Syntax:**

-   R is known for its concise and vectorized syntax. It often uses functions like **`apply`**, **`lapply`**, **`sapply`** for data manipulation.

```{r}
# Sum of all elements in a vector
sum(r_vector)

# Apply a function to each element of a vector
sapply(r_vector, function(x) x * 2)
```

-   Python syntax is more explicit. It often uses loops and list comprehensions for similar operations.

```{python}
# Sum of all elements in a list
sum(python_list)

# List comprehension to double each element
[x * 2 for x in python_list]
```

**Function Definitions:**

-   Function definitions in R use the function keyword, and function arguments are often matched by position.

```{r}
# Function definition in R
my_function <- function(x, y) {
  result <- x + y
  return(result)
}
```

-   Python uses the def keyword for function definitions, and it supports keyword arguments.

```{python}
# Function definition in Python
def my_function(x, y):
    result = x + y
    return result
```

## Second part is

```{r}
install.packages("dslabs")
library(dslabs)
data("na_example")
print(na_example)
sum(is.na(na_example))
no_na <- ifelse(is.na(na_example),0,na_example)
print(no_na)
sum(is.na(no_na))
```
